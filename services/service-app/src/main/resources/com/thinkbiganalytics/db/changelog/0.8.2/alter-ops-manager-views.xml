<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<!--
  #%L
  kylo-service-app
  %%
  Copyright (C) 2017 ThinkBig Analytics
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">


<changeSet author="sr186054" id="alter-feed-views">

  <createView replaceIfExists="true"
              schemaName="kylo"
              viewName="CHECK_DATA_TO_FEED_VW">
  SELECT FEED_ID FEED_ID, f2.NAME as FEED_NAME, check_feeds.CHECK_DATA_FEED_ID as KYLO_FEED_ID, f.NAME as KYLO_FEED_NAME
  FROM FEED_CHECK_DATA_FEEDS check_feeds
  INNER JOIN FEED f on f.ID = check_feeds.CHECK_DATA_FEED_ID
  INNER JOIN FEED f2 on f2.ID = check_feeds.FEED_ID
  WHERE f.FEED_TYPE = 'CHECK'
  UNION ALL
  SELECT ID,NAME,id, NAME from FEED
  WHERE FEED_TYPE = 'FEED';
  </createView>

  <createView replaceIfExists="true"
              schemaName="kylo"
              viewName="BATCH_FEED_SUMMARY_COUNTS_VW">
  SELECT f.FEED_ID as FEED_ID,f.FEED_NAME as FEED_NAME,
  count(e2.JOB_EXECUTION_ID) as ALL_COUNT,
  count(case when e2.status <>'ABANDONED' AND (e2.status = 'FAILED' or e2.EXIT_CODE = 'FAILED') then 1 else null end) as FAILED_COUNT,
  count(case when e2.status <>'ABANDONED' AND (e2.EXIT_CODE = 'COMPLETED') then 1 else null end) as COMPLETED_COUNT,
  count(case when e2.status = 'ABANDONED'then 1 else null end) as ABANDONED_COUNT,
  count(case when e2.status IN('STARTING','STARTED')then 1 else null end) as RUNNING_COUNT
  FROM   BATCH_JOB_EXECUTION e2
  INNER JOIN BATCH_JOB_INSTANCE i on i.JOB_INSTANCE_ID = e2.JOB_INSTANCE_ID
  INNER JOIN CHECK_DATA_TO_FEED_VW f on f.KYLO_FEED_ID = i.FEED_ID
  group by f.feed_id, f.feed_name;
  </createView>

  <createView replaceIfExists="true"
              schemaName="kylo"
              viewName="LATEST_FEED_JOB_VW">    SELECT
    f.id AS FEED_ID,
    f.name AS FEED_NAME,
    f.is_stream AS IS_STREAM,
    MAX(e.JOB_EXECUTION_ID) AS JOB_EXECUTION_ID
    FROM
    ((BATCH_JOB_EXECUTION e
    JOIN BATCH_JOB_INSTANCE i ON ((i.JOB_INSTANCE_ID = e.JOB_INSTANCE_ID)))
    JOIN FEED f ON ((f.id = i.FEED_ID)))
    GROUP BY f.id , f.name, f.is_stream </createView>
  <createView replaceIfExists="true"
              schemaName="kylo"
              viewName="FEED_HEALTH_VW"> SELECT
    summary.FEED_ID AS FEED_ID,
    summary.FEED_NAME AS FEED_NAME,
    maxJobs.IS_STREAM AS IS_STREAM,
    e.JOB_EXECUTION_ID AS JOB_EXECUTION_ID,
    i.JOB_INSTANCE_ID AS JOB_INSTANCE_ID,
    e.START_TIME AS START_TIME,
    e.END_TIME AS END_TIME,
    e.STATUS AS STATUS,
    e.EXIT_CODE AS EXIT_CODE,
    e.EXIT_MESSAGE AS EXIT_MESSAGE,
    summary.FAILED_COUNT AS FAILED_COUNT,
    summary.COMPLETED_COUNT AS COMPLETED_COUNT,
    summary.ABANDONED_COUNT AS ABANDONED_COUNT,
    summary.ALL_COUNT AS ALL_COUNT,
    summary.RUNNING_COUNT AS RUNNING_COUNT
    FROM
    (((BATCH_JOB_EXECUTION e
    JOIN BATCH_JOB_INSTANCE i ON ((i.JOB_INSTANCE_ID = e.JOB_INSTANCE_ID)))
    JOIN BATCH_FEED_SUMMARY_COUNTS_VW summary ON ((summary.FEED_ID = i.FEED_ID)))
    JOIN LATEST_FEED_JOB_VW maxJobs ON (((maxJobs.FEED_ID = summary.FEED_ID)
    AND (maxJobs.JOB_EXECUTION_ID = e.JOB_EXECUTION_ID))))</createView>

</changeSet>

</databaseChangeLog>
